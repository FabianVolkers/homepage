"""
Django settings for homepage project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import logging.config
import os
import pytz
import random

from django.utils.log import DEFAULT_LOGGING
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv
from get_docker_secret import get_docker_secret

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Load django environment env var
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT', 'production')

HOST = os.getenv('HOST', '127.0.0.1').split(",")

if ENVIRONMENT == 'development':
    PROTO = os.getenv('PROTO', 'http')
    PORT = '8000'
    BASE_URL = f'{PROTO}://{HOST[0]}:{PORT}'

    MEDIA_URL = os.getenv('MEDIA_URL', '/media/')
    MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media/'))

elif ENVIRONMENT == 'production' or ENVIRONMENT == 'staging':

    PROTO = os.getenv('PROTO', 'https')
    BASE_URL = f'{PROTO}://{HOST[0]}'

    MEDIA_URL = os.getenv('MEDIA_URL', f'{PROTO}://media.{HOST[0]}')
    MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media/'))

elif ENVIRONMENT == 'production':
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True


# Logging Configuration

# Get loglevel from env
LOGLEVEL = os.getenv('DJANGO_LOGLEVEL', 'info').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(process)d %(thread)d %(message)s',
        },

    },
    'handlers': {
        'console': {
            'level': LOGLEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': LOGLEVEL,
            'handlers': ['console', ],
        },
        'portfolio': {
            'level': LOGLEVEL,
            'handlers': ['console', ],
            'propagate': False,
        },
        'homepage': {
            'level': LOGLEVEL,
            'handlers': ['console', ],
            'propagate': False,
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = os.getenv('STATIC_URL', '/static/')


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_docker_secret('django_secret_key', default=''.join(random.SystemRandom().choice(
    'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv(
    'DEBUG', (ENVIRONMENT == 'development' or ENVIRONMENT == 'staging' or LOGLEVEL == 'DEBUG'))

ALLOWED_HOSTS = HOST


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio.apps.PortfolioConfig',
    'django_inlinecss'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'homepage.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'homepage.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASE = os.getenv('DATABASE', 'sqlite')


if DATABASE == 'postgres':
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": get_docker_secret('postgres_db', None),
            "USER": get_docker_secret('postgres_user', None),
            "PASSWORD": get_docker_secret('postgres_password', None),
            "HOST": get_docker_secret('database_host', None),
            "PORT": get_docker_secret('database_port', None),
        }
    }
else:
    # Fallback on sqlite if db is not specified
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ('de', _('German')),
    ('en', _('English')),
    ('nl', _('Dutch'))
]

LOCALE_PATHS = [
    f'{BASE_DIR}/locale',
]

LANGUAGE_COOKIE_NAME = 'djangolanguage'

USE_I18N = True
USE_L10N = True

# Timezone support
TIME_ZONE = os.getenv('TIMEZONE', 'UTC')
PYTZ = pytz.timezone(TIME_ZONE)

USE_TZ = True

# Emails
EMAIL_USE_TLS = True
EMAIL_HOST = get_docker_secret('email_host')
EMAIL_HOST_USER = get_docker_secret('email_host_user')
EMAIL_HOST_PASSWORD = get_docker_secret('email_host_password')
EMAIL_PORT = get_docker_secret('email_port', default=587)
EMAIL_CONTACT_ADDRESS = get_docker_secret('email_contact_address')
DEFAULT_FROM_EMAIL = get_docker_secret('default_from_email')

# App settings
MAX_PAGES = 10
MAX_SECTIONS = 10
MAX_NAVLINKS = 10
MAX_FOOTERLINKS = 10

# Admins and Managers for receiving error emails
ADMINS = []
MANAGERS = []
